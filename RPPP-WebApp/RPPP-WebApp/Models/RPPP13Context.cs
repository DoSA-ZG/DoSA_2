// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace RPPP_WebApp.Models;

public partial class RPPP13Context : DbContext
{
    public RPPP13Context(DbContextOptions<RPPP13Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Anonymou> Anonymous { get; set; }

    public virtual DbSet<Harvest> Harvests { get; set; }

    public virtual DbSet<KnownCustomer> KnownCustomers { get; set; }

    public virtual DbSet<Lease> Leases { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<Plant> Plants { get; set; }

    public virtual DbSet<Plot> Plots { get; set; }

    public virtual DbSet<Request> Requests { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<Soil> Soils { get; set; }

    public virtual DbSet<Worker> Workers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Anonymou>(entity =>
        {
            entity.HasKey(e => e.IdAnonymous);

            entity.Property(e => e.IdAnonymous)
                .ValueGeneratedNever()
                .HasColumnName("Id_Anonymous");
            entity.Property(e => e.DateSale)
                .HasColumnType("date")
                .HasColumnName("Date_Sale");
            entity.Property(e => e.PlaceSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Place_Sale");
        });

        modelBuilder.Entity<Harvest>(entity =>
        {
            entity.HasKey(e => e.IdHarvest);

            entity.ToTable("Harvest");

            entity.Property(e => e.IdHarvest)
                .ValueGeneratedNever()
                .HasColumnName("Id_Harvest");
            entity.Property(e => e.CostHarvest).HasColumnName("Cost_Harvest");
            entity.Property(e => e.EndHarvest)
                .HasColumnType("date")
                .HasColumnName("End_Harvest");
            entity.Property(e => e.IdPlant).HasColumnName("Id_Plant");
            entity.Property(e => e.IdSale).HasColumnName("Id_Sale");
            entity.Property(e => e.NameHarvest)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Name_Harvest");
            entity.Property(e => e.QuantityHarvest)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Quantity_Harvest");
            entity.Property(e => e.StartHarvest)
                .HasColumnType("date")
                .HasColumnName("Start_Harvest");
            entity.Property(e => e.UseHarvest)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Use_Harvest");

            entity.HasOne(d => d.IdPlantNavigation).WithMany(p => p.Harvests)
                .HasForeignKey(d => d.IdPlant)
                .HasConstraintName("FK_Harvest_Plant");

            entity.HasOne(d => d.IdSaleNavigation).WithMany(p => p.Harvests)
                .HasForeignKey(d => d.IdSale)
                .HasConstraintName("FK_Harvest_Sale");
        });

        modelBuilder.Entity<KnownCustomer>(entity =>
        {
            entity.HasKey(e => e.IdPerson);

            entity.ToTable("Known_Customer");

            entity.Property(e => e.IdPerson)
                .ValueGeneratedNever()
                .HasColumnName("Id_Person");

            entity.HasOne(d => d.IdPersonNavigation).WithOne(p => p.KnownCustomer)
                .HasForeignKey<KnownCustomer>(d => d.IdPerson)
                .HasConstraintName("FK_Known_Customer_Person");
        });

        modelBuilder.Entity<Lease>(entity =>
        {
            entity.HasKey(e => e.IdLease);

            entity.ToTable("Lease");

            entity.Property(e => e.IdLease)
                .ValueGeneratedNever()
                .HasColumnName("Id_Lease");
            entity.Property(e => e.EndDate)
                .HasColumnType("date")
                .HasColumnName("End_Date");
            entity.Property(e => e.IdPerson).HasColumnName("Id_Person");
            entity.Property(e => e.LeaseType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Lease_Type");
            entity.Property(e => e.StardDate)
                .HasColumnType("date")
                .HasColumnName("Stard_Date");

            entity.HasOne(d => d.IdPersonNavigation).WithMany(p => p.Leases)
                .HasForeignKey(d => d.IdPerson)
                .HasConstraintName("FK_Lease_Known_Customer");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.IdPerson);

            entity.ToTable("Person");

            entity.Property(e => e.IdPerson)
                .ValueGeneratedNever()
                .HasColumnName("Id_Person");
            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("First_Name");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Last_Name");
            entity.Property(e => e.Mail)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Plant>(entity =>
        {
            entity.HasKey(e => e.IdPlant);

            entity.ToTable("Plant");

            entity.Property(e => e.IdPlant)
                .ValueGeneratedNever()
                .HasColumnName("Id_Plant");
            entity.Property(e => e.EndDate)
                .HasColumnType("date")
                .HasColumnName("End_Date");
            entity.Property(e => e.FruitVegetable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Fruit_Vegetable");
            entity.Property(e => e.IdPlot).HasColumnName("Id_Plot");
            entity.Property(e => e.Origin)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Product)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProductDate)
                .HasColumnType("date")
                .HasColumnName("Product_Date");
            entity.Property(e => e.Species)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SpeciesGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Species_Group");
            entity.Property(e => e.StartDate)
                .HasColumnType("date")
                .HasColumnName("Start_Date");

            entity.HasOne(d => d.IdPlotNavigation).WithMany(p => p.Plants)
                .HasForeignKey(d => d.IdPlot)
                .HasConstraintName("FK_Plant_Plot");
        });

        modelBuilder.Entity<Plot>(entity =>
        {
            entity.HasKey(e => e.IdPlot);

            entity.ToTable("Plot");

            entity.Property(e => e.IdPlot)
                .ValueGeneratedNever()
                .HasColumnName("Id_Plot");
            entity.Property(e => e.IdLease).HasColumnName("Id_Lease");
            entity.Property(e => e.IdSoil).HasColumnName("Id_Soil");
            entity.Property(e => e.Infrastructure)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Material)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PlotGps)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Plot_GPS");
            entity.Property(e => e.PlotName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Plot_Name");
            entity.Property(e => e.SunIntensity).HasColumnName("Sun_Intensity");

            entity.HasOne(d => d.IdLeaseNavigation).WithMany(p => p.Plots)
                .HasForeignKey(d => d.IdLease)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Plot_Lease");

            entity.HasOne(d => d.IdSoilNavigation).WithMany(p => p.Plots)
                .HasForeignKey(d => d.IdSoil)
                .HasConstraintName("FK_Plot_Soil");
        });

        modelBuilder.Entity<Request>(entity =>
        {
            entity.HasKey(e => e.IdRequest);

            entity.ToTable("Request");

            entity.Property(e => e.IdRequest)
                .ValueGeneratedNever()
                .HasColumnName("Id_Request");
            entity.Property(e => e.DateRequest)
                .HasColumnType("date")
                .HasColumnName("Date_Request");
            entity.Property(e => e.IdPerson).HasColumnName("Id_Person");
            entity.Property(e => e.PriceAsked).HasColumnName("Price_Asked");
            entity.Property(e => e.QuantityAsked).HasColumnName("Quantity_Asked");
            entity.Property(e => e.SpeciesAsked)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Species_Asked");
            entity.Property(e => e.StatusRequest)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Status_Request");

            entity.HasOne(d => d.IdPersonNavigation).WithMany(p => p.Requests)
                .HasForeignKey(d => d.IdPerson)
                .HasConstraintName("FK_Request_Known_Customer");
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasKey(e => e.IdSale);

            entity.ToTable("Sale");

            entity.Property(e => e.IdSale)
                .ValueGeneratedNever()
                .HasColumnName("Id_Sale");
            entity.Property(e => e.IdAnonymous).HasColumnName("Id_Anonymous");
            entity.Property(e => e.IdHarvest).HasColumnName("Id_Harvest");
            entity.Property(e => e.IdPerson).HasColumnName("Id_Person");
            entity.Property(e => e.PlantSeedling)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Plant_Seedling");
            entity.Property(e => e.PriceSale).HasColumnName("Price_Sale");
            entity.Property(e => e.QuantitySale).HasColumnName("Quantity_Sale");

            entity.HasOne(d => d.IdAnonymousNavigation).WithMany(p => p.Sales)
                .HasForeignKey(d => d.IdAnonymous)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Sale_Anonymous");

            entity.HasOne(d => d.IdHarvestNavigation).WithMany(p => p.Sales)
                .HasForeignKey(d => d.IdHarvest)
                .HasConstraintName("FK_Sale_Harvest");

            entity.HasOne(d => d.IdPersonNavigation).WithMany(p => p.Sales)
                .HasForeignKey(d => d.IdPerson)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Sale_Known_Customer");
        });

        modelBuilder.Entity<Soil>(entity =>
        {
            entity.HasKey(e => e.IdSoil);

            entity.ToTable("Soil");

            entity.Property(e => e.IdSoil)
                .ValueGeneratedNever()
                .HasColumnName("Id_Soil");
            entity.Property(e => e.SoilName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Soil_Name");
        });

        modelBuilder.Entity<Worker>(entity =>
        {
            entity.HasKey(e => e.IdPerson).HasName("PK_Worker_1");

            entity.ToTable("Worker");

            entity.Property(e => e.IdPerson)
                .ValueGeneratedNever()
                .HasColumnName("Id_Person");
            entity.Property(e => e.IdHarvest).HasColumnName("Id_Harvest");

            entity.HasOne(d => d.IdHarvestNavigation).WithMany(p => p.Workers)
                .HasForeignKey(d => d.IdHarvest)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Worker_Harvest1");

            entity.HasOne(d => d.IdPersonNavigation).WithOne(p => p.Worker)
                .HasForeignKey<Worker>(d => d.IdPerson)
                .HasConstraintName("FK_Worker_Person");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}